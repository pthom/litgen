// ============================================================================
// This file was autogenerated
// It is presented side to side with its source: enum_test.h
// It is not used in the compilation
//    (see integration_tests/bindings/pybind_mylib.cpp which contains the full binding
//     code, including this code)
// ============================================================================

#include <nanobind/nanobind.h>
#include <nanobind/stl/string.h>
#include <nanobind/stl/function.h>
#include "mylib_main/mylib.h"

namespace py = nanobind;

// <litgen_glue_code>  // Autogenerated code below! Do not edit!

// </litgen_glue_code> // Autogenerated code end


void py_init_module_mylib(py::module_& m)
{
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:enum_test.h>    ////////////////////
    auto pyEnumBasicEnum =
        nb::enum_<BasicEnum>(m, "BasicEnum", nb::is_arithmetic(), "BasicEnum: a simple C-style enum")
            .value("a", BasicEnum_a, "This will be exported as BasicEnum.a")
            .value("aa", BasicEnum_aa, "This will be exported as BasicEnum.aa")
            .value("aaa", BasicEnum_aaa, "This will be exported as BasicEnum.aaa")
            .value("b", BasicEnum_b, "This is value b");


    auto pyEnumClassEnum =
        nb::enum_<ClassEnum>(m, "ClassEnum", nb::is_arithmetic(), "ClassEnum: a class enum that should be published")
            .value("on", ClassEnum::On, "")
            .value("off", ClassEnum::Off, "")
            .value("unknown", ClassEnum::Unknown, "");
    ////////////////////    </generated_from:enum_test.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
}
