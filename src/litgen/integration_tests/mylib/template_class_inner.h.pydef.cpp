// ============================================================================
// This file was autogenerated
// It is presented side to side with its source: template_class_inner.h
// It is not used in the compilation
//    (see integration_tests/bindings/pybind_mylib.cpp which contains the full binding
//     code, including this code)
// ============================================================================

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>
#include <pybind11/numpy.h>
#include "mylib_main/mylib.h"

namespace py = pybind11;

// <litgen_glue_code>  // Autogenerated code below! Do not edit!

// </litgen_glue_code> // Autogenerated code end


void py_init_module_mylib(py::module& m)
{
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:template_class_inner.h>    ////////////////////
    auto pyClassPair_int =
        py::class_<Pair<int>>
            (m, "Pair_int", "");

    { // inner classes & enums of Pair_int
        auto pyClassPair_ClassDataContainer =
            py::class_<Pair::DataContainer>
                (pyClassPair, "DataContainer", "")
            .def(py::init<>([](
            int value = int())
            {
                auto r = std::make_unique<Pair::DataContainer>();
                r->value = value;
                return r;
            })
            , py::arg("value") = int()
            )
            .def_readwrite("value", &Pair::DataContainer::value, "")
            ;
    } // end of inner classes & enums of Pair_int

    pyClassPair_int
        .def(py::init<>([](
        Pair::DataContainer first = Pair::DataContainer(), Pair::DataContainer second = Pair::DataContainer())
        {
            auto r = std::make_unique<Pair<int>>();
            r->first = first;
            r->second = second;
            return r;
        })
        , py::arg("first") = Pair::DataContainer(), py::arg("second") = Pair::DataContainer()
        )
        .def_readwrite("first", &Pair<int>::first, "")
        .def_readwrite("second", &Pair<int>::second, "")
        ;
    auto pyClassPair_string =
        py::class_<Pair<std::string>>
            (m, "Pair_string", "");

    { // inner classes & enums of Pair_string
        auto pyClassPair_ClassDataContainer =
            py::class_<Pair::DataContainer>
                (pyClassPair, "DataContainer", "")
            .def(py::init<>([](
            std::string value = std::string())
            {
                auto r = std::make_unique<Pair::DataContainer>();
                r->value = value;
                return r;
            })
            , py::arg("value") = std::string()
            )
            .def_readwrite("value", &Pair::DataContainer::value, "")
            ;
    } // end of inner classes & enums of Pair_string

    pyClassPair_string
        .def(py::init<>([](
        Pair::DataContainer first = Pair::DataContainer(), Pair::DataContainer second = Pair::DataContainer())
        {
            auto r = std::make_unique<Pair<std::string>>();
            r->first = first;
            r->second = second;
            return r;
        })
        , py::arg("first") = Pair::DataContainer(), py::arg("second") = Pair::DataContainer()
        )
        .def_readwrite("first", &Pair<std::string>::first, "")
        .def_readwrite("second", &Pair<std::string>::second, "")
        ;
    ////////////////////    </generated_from:template_class_inner.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
}
