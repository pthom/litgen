// ============================================================================
// This file was autogenerated
// It is presented side to side with its source: custom_bindings.h
// It is not used in the compilation
//    (see integration_tests/bindings/pybind_mylib.cpp which contains the full binding
//     code, including this code)
// ============================================================================

#include <nanobind/nanobind.h>
#include <nanobind/stl/string.h>
#include <nanobind/stl/function.h>
#include "mylib_main/mylib.h"

namespace nb = nanobind;

// <litgen_glue_code>  // Autogenerated code below! Do not edit!

// </litgen_glue_code> // Autogenerated code end


void py_init_module_mylib(nb::module_& m)
{
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:custom_bindings.h>    ////////////////////

    { // <namespace RootCustom>
        nb::module_ pyNsRootCustom = m.def_submodule("root_custom", "");
        auto pyNsRootCustom_ClassFoo =
            nb::class_<RootCustom::Foo>
                (pyNsRootCustom, "Foo", "")
            .def("__init__", [](RootCustom::Foo * self, int mValue = 0)
            {
                new (self) RootCustom::Foo();  // placement new
                auto r_ctor_ = self;
                r_ctor_->mValue = mValue;
            },
            nb::arg("m_value") = 0
            )
            .def_rw("m_value", &RootCustom::Foo::mValue, "")
            ;

        pyNsRootCustom_ClassFoo.def("get_value", [](const RootCustom::Foo& self){ return self.mValue; });
        pyNsRootCustom_ClassFoo.def("set_value", [](RootCustom::Foo& self, int value){ self.mValue = value; });



        // Example of adding a custom function to the submodule
        pyNsRootCustom.def("foo_namespace_function", []() -> int { return 53; });
    } // </namespace RootCustom>
    ////////////////////    </generated_from:custom_bindings.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
}
