# ============================================================================
# This file was autogenerated
# It is presented side to side with its source: class_default_ctor_test.h
#    (see integration_tests/bindings/lg_mylib/__init__pyi which contains the full
#     stub code, including this code)
# ============================================================================

# type: ignore
# ruff: noqa: F821
# ruff: noqa: B008

import enum
from typing import overload

# <litgen_stub> // Autogenerated code below! Do not edit!
####################    <generated_from:class_default_ctor_test.h>    ####################

# <submodule a>
class a:  # Proxy class that introduces typings for the *submodule* a
    pass  # (This corresponds to a C++ namespace. All method are static!)

    class Foo(enum.IntEnum):
        foo1 = enum.auto()  # (= 0)
        foo2 = enum.auto()  # (= 1)
        foo3 = enum.auto()  # (= 2)

    class ClassNoDefaultCtor:
        """This struct has no default constructor, so a default named constructor
        will be provided for python
        """

        b: bool = True
        a: int
        c: int = 3
        foo: Foo = Foo.foo1
        s: str = "Allo"  # (const)
        def __init__(
            self, b: bool = True, a: int = int(), c: int = 3, foo: Foo = Foo.foo1
        ) -> None:
            """Auto-generated default constructor with named params"""
            pass

    # <submodule n>
    class n:  # Proxy class that introduces typings for the *submodule* n
        pass  # (This corresponds to a C++ namespace. All method are static!)

        class S:
            def __init__(self) -> None:
                """Auto-generated default constructor"""
                pass

        class EC(enum.IntEnum):
            a = enum.auto()  # (= 0)

        class E(enum.IntEnum):
            a = enum.auto()  # (= 0)
        @staticmethod
        @overload
        def foo(e: EC = EC.a) -> None:
            pass
        @staticmethod
        @overload
        def foo(e: E = E.a) -> None:
            pass
        @staticmethod
        @overload
        def foo(s: S = S(), e: E = E.a) -> None:
            pass
    # </submodule n>

# </submodule a>
####################    </generated_from:class_default_ctor_test.h>    ####################

# </litgen_stub> // Autogenerated code end!
