// ============================================================================
// This file was autogenerated
// It is presented side to side with its source: class_inheritance_test.h
// It is not used in the compilation
//    (see integration_tests/bindings/pybind_mylib.cpp which contains the full binding
//     code, including this code)
// ============================================================================

#include <nanobind/nanobind.h>
#include <nanobind/stl/string.h>
#include <nanobind/stl/function.h>
#include "mylib_main/mylib.h"

namespace py = nanobind;

// <litgen_glue_code>  // Autogenerated code below! Do not edit!

// </litgen_glue_code> // Autogenerated code end


void py_init_module_mylib(py::module_& m)
{
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:class_inheritance_test.h>    ////////////////////
    m.def("binding_multiple_inheritance",
        binding_multiple_inheritance);

    m.def("make_dog",
        make_dog, "Test that downcasting works: the return type is Animal, but it should bark!");

    { // <namespace Animals>
        nb::module_ pyNsAnimals = m.def_submodule("animals", "");
        auto pyNsAnimals_ClassAnimal =
            nb::class_<Animals::Animal>
                (pyNsAnimals, "Animal", "")
            .def(nb::init<const std::string &>(),
                nb::arg("name"))
            .def_rw("name", &Animals::Animal::name, "")
            ;


        auto pyNsAnimals_ClassDog =
            nb::class_<Animals::Dog, Animals::Animal>
                (pyNsAnimals, "Dog", "")
            .def(nb::init<const std::string &>(),
                nb::arg("name"))
            .def("bark",
                &Animals::Dog::bark)
            ;
    } // </namespace Animals>
    ////////////////////    </generated_from:class_inheritance_test.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
}
