// ============================================================================
// This file was autogenerated
// It is presented side to side with its source: template_function_test.h
// It is not used in the compilation
//    (see integration_tests/bindings/pybind_mylib.cpp which contains the full binding
//     code, including this code)
// ============================================================================

#include <nanobind/nanobind.h>
#include <nanobind/stl/string.h>
#include <nanobind/stl/function.h>
#include "mylib_main/mylib.h"

namespace py = nanobind;

// <litgen_glue_code>  // Autogenerated code below! Do not edit!

// </litgen_glue_code> // Autogenerated code end


void py_init_module_mylib(py::module_& m)
{
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:template_function_test.h>    ////////////////////
    m.def("add_templated",
        nb::overload_cast<int, int>(AddTemplated<int>), nb::arg("a"), nb::arg("b"));
    m.def("add_templated",
        nb::overload_cast<double, double>(AddTemplated<double>), nb::arg("a"), nb::arg("b"));
    m.def("add_templated",
        nb::overload_cast<std::string, std::string>(AddTemplated<std::string>), nb::arg("a"), nb::arg("b"));

    m.def("sum_vector_and_c_array_int",
        [](std::vector<int> xs, const std::array<int, 2>& other_values) -> int
        {
            auto SumVectorAndCArray_adapt_fixed_size_c_arrays = [](std::vector<int> xs, const std::array<int, 2>& other_values) -> int
            {
                auto lambda_result = SumVectorAndCArray<int>(xs, other_values.data());
                return lambda_result;
            };

            return SumVectorAndCArray_adapt_fixed_size_c_arrays(xs, other_values);
        },     nb::arg("xs"), nb::arg("other_values"));
    m.def("sum_vector_and_c_array_string",
        [](std::vector<std::string> xs, const std::array<std::string, 2>& other_values) -> std::string
        {
            auto SumVectorAndCArray_adapt_fixed_size_c_arrays = [](std::vector<std::string> xs, const std::array<std::string, 2>& other_values) -> std::string
            {
                auto lambda_result = SumVectorAndCArray<std::string>(xs, other_values.data());
                return lambda_result;
            };

            return SumVectorAndCArray_adapt_fixed_size_c_arrays(xs, other_values);
        },     nb::arg("xs"), nb::arg("other_values"));


    auto pyClassFooTemplateFunctionTest =
        nb::class_<FooTemplateFunctionTest>
            (m, "FooTemplateFunctionTest", "")
        .def(nb::init<>()) // implicit default constructor
        .def("sum_vector_and_c_array_int",
            [](FooTemplateFunctionTest & self, std::vector<int> xs, const std::array<int, 2>& other_values) -> int
            {
                auto SumVectorAndCArray_adapt_fixed_size_c_arrays = [&self](std::vector<int> xs, const std::array<int, 2>& other_values) -> int
                {
                    auto lambda_result = self.SumVectorAndCArray<int>(xs, other_values.data());
                    return lambda_result;
                };

                return SumVectorAndCArray_adapt_fixed_size_c_arrays(xs, other_values);
            },     nb::arg("xs"), nb::arg("other_values"))
        .def("sum_vector_and_c_array_string",
            [](FooTemplateFunctionTest & self, std::vector<std::string> xs, const std::array<std::string, 2>& other_values) -> std::string
            {
                auto SumVectorAndCArray_adapt_fixed_size_c_arrays = [&self](std::vector<std::string> xs, const std::array<std::string, 2>& other_values) -> std::string
                {
                    auto lambda_result = self.SumVectorAndCArray<std::string>(xs, other_values.data());
                    return lambda_result;
                };

                return SumVectorAndCArray_adapt_fixed_size_c_arrays(xs, other_values);
            },     nb::arg("xs"), nb::arg("other_values"))
        ;
    ////////////////////    </generated_from:template_function_test.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
}
