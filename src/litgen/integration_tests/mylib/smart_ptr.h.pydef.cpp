// ============================================================================
// This file was autogenerated
// It is presented side to side with its source: smart_ptr.h
// It is not used in the compilation
//    (see integration_tests/bindings/pybind_mylib.cpp which contains the full binding
//     code, including this code)
// ============================================================================

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>
#include <pybind11/numpy.h>
#include "mylib_main/mylib.h"

namespace py = pybind11;

// <litgen_glue_code>  // Autogenerated code below! Do not edit!

// </litgen_glue_code> // Autogenerated code end


void py_init_module_mylib(py::module& m)
{
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:smart_ptr.h>    ////////////////////
    auto pyClassSmartElem =
        py::class_<SmartElem, std::shared_ptr<SmartElem>>
            (m, "SmartElem", " With pybind11, SmartElem is mentioned in options.class_held_as_shared__regex\n (because it might be stored as a shared_ptr in the generated code)")
        .def(py::init<>([](
        int x = 0)
        {
            auto r_ctor_ = std::make_unique<SmartElem>();
            r_ctor_->x = x;
            return r_ctor_;
        })
        , py::arg("x") = 0
        )
        .def_readwrite("x", &SmartElem::x, "")
        ;


    m.def("make_shared_elem",
        make_shared_elem, py::arg("x"));


    auto pyClassElemContainer =
        py::class_<ElemContainer>
            (m, "ElemContainer", "")
        .def(py::init<>())
        .def_readwrite("vec", &ElemContainer::vec, "")
        .def_readwrite("shared_ptr", &ElemContainer::shared_ptr, "")
        .def_readwrite("vec_shared_ptrs", &ElemContainer::vec_shared_ptrs, "")
        ;
    ////////////////////    </generated_from:smart_ptr.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
}
