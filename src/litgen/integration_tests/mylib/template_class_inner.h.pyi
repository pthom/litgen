# ============================================================================
# This file was autogenerated
# It is presented side to side with its source: template_class_inner.h
#    (see integration_tests/bindings/lg_mylib/__init__pyi which contains the full
#     stub code, including this code)
# ============================================================================

# type: ignore

# <litgen_stub> // Autogenerated code below! Do not edit!
####################    <generated_from:template_class_inner.h>    ####################

#  Pair is a template class with an inner struct DataContainer
#  that will be implemented for the types ["int", "std::string"]
#
# See inside autogenerate_mylib.py:
#    options.class_template_options.add_specialization(
#        name_regex=r"^Pair$",  # r".*" => all classes
#    cpp_types_list_str=["int", "std::string"],  # instantiated types
#    cpp_synonyms_list_str=[],
#    )

#  ------------------------------------------------------------------------
#      <template specializations for class Pair>
class Pair_int:  # Python specialization for Pair<int>
    class DataContainer:
        value: int
        def __init__(self, value: int = int()) -> None:
            """Auto-generated default constructor with named params"""
            pass
    first: DataContainer
    second: DataContainer
    def __init__(
        self,
        first: Pair.DataContainer = Pair.DataContainer(),
        second: Pair.DataContainer = Pair.DataContainer(),
    ) -> None:
        """Auto-generated default constructor with named params"""
        pass

class Pair_string:  # Python specialization for Pair<std::string>
    class DataContainer:
        value: str
        def __init__(self, value: str = "") -> None:
            """Auto-generated default constructor with named params"""
            pass
    first: DataContainer
    second: DataContainer
    def __init__(
        self,
        first: Pair.DataContainer = Pair.DataContainer(),
        second: Pair.DataContainer = Pair.DataContainer(),
    ) -> None:
        """Auto-generated default constructor with named params"""
        pass

#      </template specializations for class Pair>
#  ------------------------------------------------------------------------
####################    </generated_from:template_class_inner.h>    ####################

# </litgen_stub> // Autogenerated code end!
