// ============================================================================
// This file was autogenerated
// It is presented side to side with its source: class_default_ctor_test.h
// It is not used in the compilation
//    (see integration_tests/bindings/pybind_mylib.cpp which contains the full binding
//     code, including this code)
// ============================================================================

#include <nanobind/nanobind.h>
#include <nanobind/stl/string.h>
#include <nanobind/stl/function.h>
#include "mylib_main/mylib.h"

namespace py = nanobind;

// <litgen_glue_code>  // Autogenerated code below! Do not edit!

// </litgen_glue_code> // Autogenerated code end


void py_init_module_mylib(py::module_& m)
{
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:class_default_ctor_test.h>    ////////////////////

    { // <namespace A>
        nb::module_ pyNsA = m.def_submodule("a", "");
        auto pyEnumFoo =
            nb::enum_<A::Foo>(pyNsA, "Foo", nb::is_arithmetic(), "")
                .value("foo1", A::Foo::Foo1, "")
                .value("foo2", A::Foo::Foo2, "")
                .value("foo3", A::Foo::Foo3, "");


        auto pyNsA_ClassClassNoDefaultCtor =
            nb::class_<A::ClassNoDefaultCtor>
                (pyNsA, "ClassNoDefaultCtor", " This struct has no default constructor, so a default named constructor\n will be provided for python")
            .def("__init__", [](A::ClassNoDefaultCtor * self, bool b = true, int a = int(), int c = 3, A::Foo foo = A::Foo::Foo1)
            {
                new (self) A::ClassNoDefaultCtor();  // placement new
                auto r_ctor_ = self;
                r_ctor_->b = b;
                r_ctor_->a = a;
                r_ctor_->c = c;
                r_ctor_->foo = foo;
            },
            nb::arg("b") = true, nb::arg("a") = int(), nb::arg("c") = 3, nb::arg("foo") = A::Foo::Foo1
            )
            .def_rw("b", &A::ClassNoDefaultCtor::b, "")
            .def_rw("a", &A::ClassNoDefaultCtor::a, "")
            .def_rw("c", &A::ClassNoDefaultCtor::c, "")
            .def_rw("foo", &A::ClassNoDefaultCtor::foo, "")
            .def_ro("s", &A::ClassNoDefaultCtor::s, "")
            ;
        { // <namespace N>
            nb::module_ pyNsA_NsN = pyNsA.def_submodule("n", "");
            auto pyNsA_NsN_ClassS =
                nb::class_<A::N::S>
                    (pyNsA_NsN, "S", "")
                .def(nb::init<>()) // implicit default constructor
                ;


            auto pyEnumEC =
                nb::enum_<A::N::EC>(pyNsA_NsN, "EC", nb::is_arithmetic(), "")
                    .value("a", A::N::EC::a, "");


            auto pyEnumE =
                nb::enum_<A::N::E>(pyNsA_NsN, "E", nb::is_arithmetic(), "")
                    .value("a", A::N::E_a, "");


            pyNsA_NsN.def("foo",
                nb::overload_cast<A::N::EC>(A::N::Foo), nb::arg("e") = A::N::EC::a);

            pyNsA_NsN.def("foo",
                nb::overload_cast<A::N::E>(A::N::Foo), nb::arg("e") = A::N::E_a);

            pyNsA_NsN.def("foo",
                nb::overload_cast<A::N::S, A::N::E>(A::N::Foo), nb::arg("s") = A::N::S(), nb::arg("e") = A::N::E_a);
        } // </namespace N>

    } // </namespace A>
    ////////////////////    </generated_from:class_default_ctor_test.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
}
