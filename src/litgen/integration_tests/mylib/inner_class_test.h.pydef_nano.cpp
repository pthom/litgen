// ============================================================================
// This file was autogenerated
// It is presented side to side with its source: inner_class_test.h
// It is not used in the compilation
//    (see integration_tests/bindings/pybind_mylib.cpp which contains the full binding
//     code, including this code)
// ============================================================================

#include <nanobind/nanobind.h>
#include <nanobind/stl/string.h>
#include <nanobind/stl/function.h>
#include "mylib_main/mylib.h"

namespace py = nanobind;

// <litgen_glue_code>  // Autogenerated code below! Do not edit!

// </litgen_glue_code> // Autogenerated code end


void py_init_module_mylib(py::module_& m)
{
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:inner_class_test.h>    ////////////////////

    { // <namespace SomeNamespace>
        nb::module_ pyNsSomeNamespace = m.def_submodule("some_namespace", "namespace SomeNamespace");
        auto pyNsSomeNamespace_ClassParentStruct =
            nb::class_<SomeNamespace::ParentStruct>
                (pyNsSomeNamespace, "ParentStruct", "");

        { // inner classes & enums of ParentStruct
            auto pyNsSomeNamespace_ClassParentStruct_ClassInnerStruct =
                nb::class_<SomeNamespace::ParentStruct::InnerStruct>
                    (pyNsSomeNamespace_ClassParentStruct, "InnerStruct", "")
                .def_rw("value", &SomeNamespace::ParentStruct::InnerStruct::value, "")
                .def(nb::init<int>(),
                    nb::arg("value") = 10)
                .def("add",
                    &SomeNamespace::ParentStruct::InnerStruct::add, nb::arg("a"), nb::arg("b"))
                ;
            auto pyEnumInnerEnum =
                nb::enum_<SomeNamespace::ParentStruct::InnerEnum>(pyNsSomeNamespace_ClassParentStruct, "InnerEnum", nb::is_arithmetic(), "")
                    .value("zero", SomeNamespace::ParentStruct::InnerEnum::Zero, "")
                    .value("one", SomeNamespace::ParentStruct::InnerEnum::One, "")
                    .value("two", SomeNamespace::ParentStruct::InnerEnum::Two, "")
                    .value("three", SomeNamespace::ParentStruct::InnerEnum::Three, "");
        } // end of inner classes & enums of ParentStruct

        pyNsSomeNamespace_ClassParentStruct
            .def("__init__", [](SomeNamespace::ParentStruct * self, SomeNamespace::ParentStruct::InnerStruct inner_struct = SomeNamespace::ParentStruct::InnerStruct(), SomeNamespace::ParentStruct::InnerEnum inner_enum = SomeNamespace::ParentStruct::InnerEnum::Three)
            {
                new (self) SomeNamespace::ParentStruct();  // placement new
                auto r_ctor_ = self;
                r_ctor_->inner_struct = inner_struct;
                r_ctor_->inner_enum = inner_enum;
            },
            nb::arg("inner_struct") = SomeNamespace::ParentStruct::InnerStruct(), nb::arg("inner_enum") = SomeNamespace::ParentStruct::InnerEnum::Three
            )
            .def_rw("inner_struct", &SomeNamespace::ParentStruct::inner_struct, "")
            .def_rw("inner_enum", &SomeNamespace::ParentStruct::inner_enum, "")
            ;
    } // </namespace SomeNamespace>
    ////////////////////    </generated_from:inner_class_test.h>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
}
